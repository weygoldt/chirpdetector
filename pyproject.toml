[tool.poetry]
name = "chirpdetector"
version = "0.0.1"
description = "Detect brief communication signals of weakly electric fish in the frequency domain"
authors = ["Patrick Weygoldt <patrick@weygoldt.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
numpy = "^1.26.1"
torch = "^2.1.0"
torchaudio = "^2.1.0"
torchvision = "^0.16.0"
matplotlib = "^3.8.0"
scikit-learn = "^1.3.2"
toml = "^0.10.2"
pandas = "^2.1.2"
pydantic = "^2.4.2"
rich = "^13.6.0"
click = "^8.1.7"
rich-click = "^1.7.1"
gridtools = {path = "../gridtools", develop = true}

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
pytest-coverage = "^0.0"
pytest = "^7.4.3"
ruff = "^0.1.6"
pyright = "^1.1.337"
mkdocs-glightbox = "^0.3.5"
mkdocs-click = "^0.8.1"

[tool.poetry.scripts]
chirpdetector = "chirpdetector.chirpdetector:chirpdetector"
cpd = "chirpdetector.chirpdetector:chirpdetector"

[tool.ruff]
line-length = 79

[tool.ruff.lint]
select = [
    "W", # pycodestyle
    "E", # pycodestyle
    "F", # Pyflakes
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    "ANN", # flake8-annotations
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "EM", # flake8-error-msg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PD", # pandas-vet
    "PL", # pylint
    "TRY", # tryceratops
    "NPY", # numpy-specific
    "I", # isort
    "C90", # complexity (McCabe)
    "N", # pep8-naming
    "D", # pydocstyle
]
ignore = [
    "COM812", # missing trailing comma
    "TD002", # missing todo author
    "TD003", # missing todo link
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.black]
line-length = 79

[tool.pyright]
include = ["chirpdetector", "tests"]
defineConstant = { DEBUG = true }
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.11"
pythonPlatform = "Linux"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
